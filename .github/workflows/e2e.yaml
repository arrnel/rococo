name: e2e

on:
  pull_request:
    types: [ opened, reopened, synchronize ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      PROFILE: docker
      COMPOSE_PROFILES: test
      PREFIX: arrnel
      ARCH: amd64
      ALLURE_DOCKER_API: ${{ secrets.ALLURE_DOCKER_API }}
      CLEAR_DB_AFTER_TESTS: ${{ vars.CLEAR_DB_AFTER_TESTS }}
      REWRITE_ALL_IMAGES: ${{ vars.REWRITE_ALL_IMAGES }}
      ADD_SERVICES_LOGS_TO_ALLURE: ${{ vars.ADD_SERVICES_LOGS_TO_ALLURE }}
      TESTS_PASSED_PERCENTAGE: ${{ vars.TESTS_PASSED_PERCENTAGE }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_TOKEN_NAME: ${{ secrets.GH_TOKEN_NAME }}
      BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      EXECUTION_TYPE: github

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_SHA }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build backends
        run: |
          ./gradlew jibDockerBuild -x :rococo-tests:test

      - name: Pull Chrome 127
        run: |
          docker pull selenoid/vnc_chrome:127.0

      - name: Get the last commit message
        run: |
          echo "HEAD_COMMIT_MESSAGE=$(git show -s --format=%s)" >> $GITHUB_ENV

      - name: Run e2e tests
        id: e2e
        run: |
          docker compose -f docker-compose.ci.yml up -d
          docker ps -a
          docker wait rococo-tests
          echo "### Test logs ###"
          docker logs rococo-tests

      - name: Get test statistics
        id: test_stats
        run: |
          response=$(curl -s -f "http://logs.rococo.dc:9008/api/stat/tests/last" || echo "{}")
          echo "Raw response: $response"
          if [ -z "$response" ] || [ "$response" = "{}" ]; then
            echo "Error: Failed to fetch test statistics or empty response"
            exit 1
          fi
          echo "Test statistics: $response"
          id=$(echo "$response" | jq -r '.id // 0')
          failed=$(echo "$response" | jq -r '.failed // 0')
          broken=$(echo "$response" | jq -r '.broken // 0')
          skipped=$(echo "$response" | jq -r '.skipped // 0')
          passed=$(echo "$response" | jq -r '.passed // 0')
          unknown=$(echo "$response" | jq -r '.unknown // 0')
          total=$(echo "$response" | jq -r '.total // 0')
          is_passed=$(echo "$response" | jq -r '.is_passed // false')
          passed_percentage=$(echo "$response" | jq -r '.passed_percentage // 0')
          
          echo "id=$id" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "broken=$broken" >> $GITHUB_OUTPUT
          echo "skipped=$skipped" >> $GITHUB_OUTPUT
          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "unknown=$unknown" >> $GITHUB_OUTPUT
          echo "total=$total" >> $GITHUB_OUTPUT
          echo "is_passed=$is_passed" >> $GITHUB_OUTPUT
          echo "passed_percentage=$passed_percentage" >> $GITHUB_OUTPUT

      - name: Quality gate
        id: quality_gate
        run: |
          if [ "${{ steps.test_stats.outputs.is_passed }}" = "true" ]; then
            echo "Quality gate passed"
            exit 0
          else
            echo "Quality gate failed"
            exit 1
          fi

      - name: Add comment to PR with link to allure
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const isPassed = '${{ steps.test_stats.outputs.is_passed }}' === 'true';
            const reportUrl = 'https://allure.niffler-stage.qa.guru/api/allure-docker-service/projects/rococo-arrnel/reports/latest/index.html';
            const historyUrl = 'https://allure.niffler-stage.qa.guru/allure-docker-service-ui/projects/rococo-arrnel';
            
            const stats = {
              passed: Number('${{ steps.test_stats.outputs.passed }}') || 0,
              failed: Number('${{ steps.test_stats.outputs.failed }}') || 0,
              broken: Number('${{ steps.test_stats.outputs.broken }}') || 0,
              skipped: Number('${{ steps.test_stats.outputs.skipped }}') || 0,
              unknown: Number('${{ steps.test_stats.outputs.unknown }}') || 0,
              total: Number('${{ steps.test_stats.outputs.total }}') || 0,
              passedPercentage: Number('${{ steps.test_stats.outputs.passed_percentage }}') || 0
            };
            
            console.log('Stats:', stats); // Debug output
            
            const statsMessage = `
            📋 **Test Statistics:**
            
            | Status       | Count                      |
            |:-------------|:---------------------------|
            | ✅ Passed     | ${stats.passed}            |
            | 🔴 Failed    | ${stats.failed}            |
            | 🟠 Broken    | ${stats.broken}            |
            | ⏩ Skipped   | ${stats.skipped}           |
            | ❓ Unknown    | ${stats.unknown}           |
            | 📊 Total     | ${stats.total}             |
            | 📈 Pass Rate | ${stats.passedPercentage}% |
            `;
            
            const message = isPassed ?
              `✅ TEST RUN PASSED ✅\n${statsMessage}\nThere is the [report](${reportUrl})\n🕓 All reports [history](${historyUrl})` :
              `🔴 TEST RUN FAILED 🔴\n${statsMessage}\nThere is the [report](${reportUrl})\n🕓 All reports [history](${historyUrl})`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });