plugins {
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.protobuf' version '0.9.4'
    id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'org.rococo'
version = '0.0.1'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation project(':rococo-grpc')
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "net.devh:grpc-server-spring-boot-starter:${project.ext.springGrpcVersion}"
    implementation "org.flywaydb:flyway-core:${project.ext.flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${project.ext.flywayVersion}"
    implementation "net.devh:grpc-client-spring-boot-starter:${project.ext.springGrpcVersion}"
    implementation "com.google.code.findbugs:jsr305:${project.ext.jsr305Version}"
    implementation "org.springframework.kafka:spring-kafka"
    implementation "com.github.danielwegener:logback-kafka-appender:${logbackKafkaAppenderVersion}"
    implementation "org.codehaus.janino:janino:${project.ext.janinoVersion}"
    compileOnly "org.projectlombok:lombok"
    runtimeOnly "org.postgresql:postgresql"
    annotationProcessor "org.projectlombok:lombok"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.junit.jupiter:junit-jupiter:${project.ext.junitJupiterVersion}"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
}

jib {
    container {
        ports = ['9006']
        jvmFlags = ["-Dspring.profiles.active=${System.env.PROFILE}"]
        environment = ['TZ': 'Europe/Moscow']
        creationTime = 'USE_CURRENT_TIMESTAMP'
        labels = [
                'maintainer': 'Romanov Dmitriy @arrnel',
                'version'   : "${project.version}".toString()
        ]
    }
    from {
        image = "${project.ext.dockerImage}"
        platforms {
            platform {
                architecture = "${project.ext.dockerArch}"
                os = 'linux'
            }
        }
    }
    to {
        image = "${project.ext.dockerHubName}/${project.name}-${System.env.PROFILE}"
        tags = ['latest', "${project.version}"]
    }
}

tasks.jib.dependsOn test
tasks.jibDockerBuild.dependsOn test

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
